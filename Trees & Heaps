TREES:
-------------------------
1. Inorder Traversal (A)
Given a binary tree, return the inorder traversal of its nodes’ values.

Test case Example :
-------------------------------
Input :
Given binary tree

1
 \
  2
 /
3
The input is presented as:
1 -1 2 3 -1 -1 -1 (here -1 represents null)
Please note that the above is only a representation of the input. In the answer, please use the head node to traverse through the tree

Output :
[1, 3, 2]

PROGRAM:
--------------------

2. Preorder Traversal (A)
Given a binary tree, return the preorder traversal of its nodes’ values.

Test case Example :
-----------------------
Input :
Given binary tree
        1
         \
          2
         /
        3
 
The input is presented as:
1 -1 2 3 -1 -1 -1 (here -1 represents null)
Please note that the above is only a representation of the input. In the answer, please use the head node to traverse through the tree

Output :
[1, 2, 3]

PROGRAM:
---------------

3. Postorder Traversal (A)
Given a binary tree, return the postorder traversal of its nodes’ values.
Note: Using recursion is not allowed.

Test case Example :
-------------------------
Input :
Given binary tree

1
 \
  2
 /
3
The input is presented as:
1 -1 2 3 -1 -1 -1 (here -1 represents null)
Please note that the above is only a representation of the input. In the answer, please use the head node to traverse through the tree

Output :
[3, 2, 1]

PROGRAM:
----------------------

4. Searching in a Tree - DFS
Given a binary search tree, write a function search to find an element k in the tree.
If k exists, return 1, else return 0

Test case Example:
--------------------
Input
Given binary tree

      5
     / \
    3   6
   / \
  2   4
 /
1
 
k = 3

Output
1

PROGRAM:
-------------------------------

5. Level order traversal
Given a binary tree, print level order traversal in a way that nodes of all levels are printed in separate lines.

Test case Example :
-------------------------------
Input :
Given binary tree
       1
    /    \
   2       3
 /   \       \
4     5       6
    /  \     /
   7    8   9
 
Output:
1
2 3
4 5 6
7 8 9

PROGRAM:
----------------------------

6. Kth smallest element in a tree
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
Note: You may assume k is always valid, 1 ≤ k ≤ BST’s total elements.
Test case Example:
-------------------------
Input :
Given binary tree
      5
     / \
    3   6
   / \
  2   4
 /
1
 
k = 3

Output :
3

PROGRAM:
----------------------------

7. Least Common Ancestor in a tree
Find the lowest common ancestor in an unordered binary tree given two values in the tree.

Test case example:
-----------------------
Input :
Given binary tree

     _______3______
    /              \
 ___5__          ___1__
/      \        /      \
6      _2_     0        8
      /   \
     7    4
 
Node1 = 5
Node2 = 1

Output:
3

Note:
You are given 2 values. Find the lowest common ancestor of the two nodes represented by val1 and val2
No guarantee that val1 and val2 exist in the tree. If one value doesn’t exist in the tree then return -1
There are no duplicate values.
You can use extra memory, helper functions, and can modify the node struct but, you can’t add a parent pointer.


PROGRAM:
------------------------------------

8. Invert the Binary Tree
Given a binary tree, invert the binary tree and return it.
Look at the example for more details.

Test case example:
-----------------------
Input :
     1
   /   \
  2     3
 / \   / \
4   5 6   7
 
Output :
     1
   /   \
  3     2
 / \   / \
7   6 5   4
 
PROGRAM:
----------------------

9. Deleting from a BST
Given a root node reference of a BST and a key, delete the node with the given key in the BST.
Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).

Test case Example :
----------------------
Input :
    
         5
        / \
       3   6
      / \   \
     2   4   7
 
key = 3

Output :
    one valid answer is  
        5
       / \
      4   6
     /     \
    2       7
 
    another valid answer
       5
      / \
      2   6
       \   \
        4   7
    you can do any of them.

PROGRAM:
---------------------

10. Recover Binary Search Tree
Two elements of a binary search tree (BST) are swapped by mistake.
Tell us the 2 values swapping which the tree will be restored.
Note: A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?
Test case example:
--------------------------
Input :
      1
     / \
    2   3
 
Output :
[1, 2]
Explanation :
Swapping 1 and 2 will change the BST to be 
     2
    / \
   1   3
 
which is a valid BST.

PROGRAM:
-------------------------

HEAPS:
----------------------
1. A Simple Heap
This question is designed to help you get a better understanding of basic heap operations.
You will be given queries of 3 types:

1 v - Add an element v to the heap.
2 v - Delete the element v from the heap.
3 -1 - Return the minimum of all the elements in the heap.
Note: It is guaranteed that the element to be deleted will be there in the heap. Also, at any instant, only distinct elements will be in the heap.

Test case Example :
-------------------------
Input :
    Type = [1, 1, 3, 2, 3]
    A = [4, 9, -1, 4, -1]
Output :
    [4, 9]

PROGRAM:
--------------------

2. Heap Sort
Implement HeapSort algorithm to sort the array in an ascending order.

Test case Example :
----------------------
Input :
[6, 1, 9, 2, 1]
Output :
[1, 1, 2, 6, 9]

PROGRAM:
----------------------

3. Kth Smallest Element
Given a list of numbers and number K, return Kth smallest number in the list.If there are less than K numbers in list return -1.
Note: List may have repeated numbers.

Test case Example :
----------------------
Input :
K = 3
Numbers = [3, 2, 1, 6, 4]
Output :
3

PROGRAM:
--------------------------
